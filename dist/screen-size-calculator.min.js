!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.ScreenSizeCalculator=e():t.ScreenSizeCalculator=e()}(this,function(){return function(t){var e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},n.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s="./src/screen-size-calculator.ts")}({"./src/screen-size-calculator.ts":
/*!***************************************!*\
  !*** ./src/screen-size-calculator.ts ***!
  \***************************************/
/*! exports provided: ScreenSizeCalculator, default */function(t,e,n){"use strict";n.r(e),n.d(e,"ScreenSizeCalculator",function(){return o});var i=n(/*! ./util */"./src/util.ts"),r=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},o=function(){function t(t){void 0===t&&(t={}),this.options=r({},this.getDefaultOptions(),t),this.screenSize=this.calculate()}return t.prototype.getDefaultOptions=function(){return{aspectRatio:"16:9",unit:"inch"}},t.prototype.calculate=function(){this.setProperties();var t=this.options,e=t.width,n=t.height,i=t.diagonal;return i?this.getScreenSizeFromDiagonal(i):e?this.getScreenSizeFromWidth(e):this.getScreenSizeFromHeight(n)},t.prototype.setProperties=function(){var t=this.options.aspectRatio.split(":").map(function(t){return parseFloat(t)}),e=t[0],n=t[1];this.ratio=[e,n,Object(i.getDiagonal)(e,n)];var r=this.options,o=r.width,c=r.height,u=r.diagonal;if(!o&&!c&&!u)throw ReferenceError("At least one of width, height or diagonal must exist.")},t.prototype.getData=function(t,e){var n=this;void 0===e&&(e=2);var r=this.screenSize,o=[r.width,r.height,r.diagonal].map(function(r){if(t&&t!==n.screenSize.unit)switch(t){case"cm":r=Object(i.inchToCm)(r);break;case"inch":r=Object(i.cmToInch)(r)}return Object(i.decimal)(r,e)});return{width:o[0],height:o[1],diagonal:o[2],unit:t||this.screenSize.unit}},t.prototype.getScreenSizeFromDiagonal=function(t){var e=this.ratio,n=e[0],i=e[1],r=e[2];return{width:t*n/r,height:t*i/r,diagonal:t,unit:this.options.unit}},t.prototype.getScreenSizeFromWidth=function(t){var e=this.ratio,n=e[0];return{width:t,height:t*e[1]/n,diagonal:t*e[2]/n,unit:this.options.unit}},t.prototype.getScreenSizeFromHeight=function(t){var e=this.ratio,n=e[0],i=e[1];return{width:t*n/i,height:t,diagonal:t*e[2]/i,unit:this.options.unit}},t}();e.default=o},"./src/util.ts":
/*!*********************!*\
  !*** ./src/util.ts ***!
  \*********************/
/*! exports provided: getDiagonal, decimal, cmToInch, inchToCm */function(t,e,n){"use strict";function i(t,e){return Math.sqrt(Math.pow(t,2)+Math.pow(e,2))}function r(t,e){var n=Math.pow(10,e);return Math.round(t*n)/n}function o(t){return t/2.54}function c(t){return 2.54*t}n.r(e),n.d(e,"getDiagonal",function(){return i}),n.d(e,"decimal",function(){return r}),n.d(e,"cmToInch",function(){return o}),n.d(e,"inchToCm",function(){return c})}})});